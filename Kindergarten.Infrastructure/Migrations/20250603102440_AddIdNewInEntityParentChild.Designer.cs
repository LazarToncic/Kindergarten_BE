// <auto-generated />
using System;
using Kindergarten.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kindergarten.Infrastructure.Migrations
{
    [DbContext(typeof(KindergartenDbContext))]
    [Migration("20250603102440_AddIdNewInEntityParentChild")]
    partial class AddIdNewInEntityParentChild
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kindergarten.Domain.Entities.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Allergy", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("RequestedKindergartenId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("YearOfBirth")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RequestedKindergartenId");

                    b.ToTable("Child", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildAllergy", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AllergyId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("ChildAllergies", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KindergartenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UnassignedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("KindergartenId");

                    b.ToTable("ChildDepartmentAssignments", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildMedicalCondition", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicalConditionId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildId", "MedicalConditionId");

                    b.HasIndex("MedicalConditionId");

                    b.ToTable("ChildMedicalCondition", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildWithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.ToTable("ChildWithdrawalRequest", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeGroup")
                        .HasColumnType("integer");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.DepartmentEmployee", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleInDepartment")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentEmployees");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeePositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KindergartenId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("KindergartenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.EmployeePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeePositions", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.EmployeeQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QualificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("QualificationObtained")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QualificationId");

                    b.ToTable("EmployeeQualifications", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Kindergarten", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Kindergarten", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.KindergartenDepartment", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KindergartenId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "KindergartenId");

                    b.HasIndex("KindergartenId");

                    b.ToTable("KindergartenDepartments");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.MedicalCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("MedicalCondition", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ParentChild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId", "ChildId")
                        .IsUnique();

                    b.ToTable("ParentChild", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ParentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChildrenJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InPersonApprovedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsInPersonApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnlineApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("OnlineApprovedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ParentRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreferredKindergarten")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InPersonApprovedByUserId");

                    b.HasIndex("OnlineApprovedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ParentRequest", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("QualificationTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("Qualification", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.QualificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("QualificationType", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Expires")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int?>("Bonus")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Tax")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Salaries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Child", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Kindergarten", "RequestedKindergarten")
                        .WithMany()
                        .HasForeignKey("RequestedKindergartenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestedKindergarten");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildAllergy", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Allergy", "Allergy")
                        .WithMany("ChildAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Child", "Child")
                        .WithMany("ChildAllergies")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildDepartment", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Child", "Child")
                        .WithMany("DepartmentAssignments")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Department", "Department")
                        .WithMany("ChildDepartmentAssignments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Kindergarten", "Kindergarten")
                        .WithMany()
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Department");

                    b.Navigation("Kindergarten");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildMedicalCondition", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Child", "Child")
                        .WithMany("ChildMedicalConditions")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.MedicalCondition", "MedicalCondition")
                        .WithMany("ChildMedicalConditions")
                        .HasForeignKey("MedicalConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("MedicalCondition");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ChildWithdrawalRequest", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Child", "Child")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Child");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.DepartmentEmployee", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Employee", "Employee")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Kindergarten", "Kindergarten")
                        .WithMany("Employees")
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Kindergarten.Domain.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeePosition");

                    b.Navigation("Kindergarten");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.EmployeeQualification", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Qualification", "Qualification")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.KindergartenDepartment", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Department", "Department")
                        .WithMany("KindergartenDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Kindergarten", "Kindergarten")
                        .WithMany("KindergartenDepartment")
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Kindergarten");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Parent", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Parent")
                        .HasForeignKey("Kindergarten.Domain.Entities.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ParentChild", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Child", "Child")
                        .WithMany("ParentChildren")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Parent", "Parent")
                        .WithMany("ParentChildren")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ParentRequest", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "InPersonApprovedByUser")
                        .WithMany()
                        .HasForeignKey("InPersonApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "OnlineApprovedByUser")
                        .WithMany()
                        .HasForeignKey("OnlineApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "User")
                        .WithMany("ParentRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InPersonApprovedByUser");

                    b.Navigation("OnlineApprovedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Qualification", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.QualificationType", "QualificationType")
                        .WithMany("Qualifications")
                        .HasForeignKey("QualificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualificationType");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Salary", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Employee", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Allergy", b =>
                {
                    b.Navigation("ChildAllergies");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Parent")
                        .IsRequired();

                    b.Navigation("ParentRequests");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Child", b =>
                {
                    b.Navigation("ChildAllergies");

                    b.Navigation("ChildMedicalConditions");

                    b.Navigation("DepartmentAssignments");

                    b.Navigation("ParentChildren");

                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Department", b =>
                {
                    b.Navigation("ChildDepartmentAssignments");

                    b.Navigation("DepartmentEmployees");

                    b.Navigation("KindergartenDepartments");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Employee", b =>
                {
                    b.Navigation("DepartmentEmployees");

                    b.Navigation("EmployeeQualifications");

                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Kindergarten", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("KindergartenDepartment");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.MedicalCondition", b =>
                {
                    b.Navigation("ChildMedicalConditions");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Parent", b =>
                {
                    b.Navigation("ParentChildren");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Qualification", b =>
                {
                    b.Navigation("EmployeeQualifications");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.QualificationType", b =>
                {
                    b.Navigation("Qualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
